\documentclass[8pt,twocolumn]{amsart}

\textwidth=5in
\textheight=7.5in
%\usepackage{showkeys}
\hfuzz=3pt
\usepackage{amsxtra}
\usepackage{amsopn}
\usepackage{amsmath,amsthm,amssymb}
\usepackage{color}
\usepackage{amscd}
\usepackage{pifont}
\usepackage{amsfonts}
\usepackage{latexsym}
\usepackage{verbatim}
\usepackage{pb-diagram}
%\usepackage{graphicx}
\newcommand{\n}{\noindent}
\newcommand{\lr}{\longrightarrow}
\newcommand{\dis}{\di^{\circledast}}
\newcommand{\fo}{\mathcal{F}}
\newcommand{\frs}[2]{\hbox{$\ds \frac{#1}{#2}$}}
\newcommand{\op}{\overline{\parzial}}
\newcommand{\ot}{\otimes}
%\newcommand{\cmark}{\ding{51}}
%\newcommand{\xmark}{\ding{55}}
\theoremstyle{plain}
\newtheorem{theorem}{Theorem}[section]
\newtheorem*{theorem*}{Theorem}
\newtheorem{definition}[theorem]{Definition}
\newtheorem{lemma}[theorem]{Lemma}
%\newtheorem{thm}[definition]{Theorem}
\newtheorem{prop}[theorem]{Proposition}
\newtheorem{cor}[theorem]{Corollary}
\newtheorem{rem}[theorem]{Remark}
\newtheorem{ex}[theorem]{Example}
\newtheorem*{mt*}{Main Theorem}
\sloppy
\DeclareMathOperator{\di}{d}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SIMBOLI MATEMATICI %
\newcommand\C{{\mathbb C}}
\newcommand\f{\mathcal{F}}
\newcommand\g{{\mathfrak{g}}}
\newcommand\h{{\mathfrak{h}}}
\newcommand\A{{\mathfrak{a}}}
\newcommand\B{{\mathfrak{b}}}
\newcommand\ka{{\mathfrak{k}}}
\newcommand\z{{\mathfrak{z}}}
\newcommand\s{{\mathfrak{s}}}
\renewcommand\k{{\kappa}}
\renewcommand\l{{\lambda}}
\newcommand\m{{\mathfrak{m}}}
\renewcommand\O{{\omega}}
\renewcommand\t{{\theta}}
\newcommand\ebar{{\bar{\varepsilon}}}
\newcommand\R{{\mathbb R}}
\newcommand\Z{{\mathbb Z}}
\newcommand\T{{\mathbb T}}
\newcommand{\de}[2]{\frac{\partial #1}{\partial #2}}
\newcommand\w{\wedge}
%\newcommand{\icsmark}{\ding{55}}
\newcommand{\ov}[1]{\overline{ #1}}
\newcommand{\Tk}{\mathcal{T}_{\omega}}
\newcommand{\ovp}{\overline{\partial}}
\newcommand\ad{{\rm ad}}
\newcommand\D{\mathcal{D}}
\newcommand\pa[1]{\partial_{#1}}
\newcommand\om{\omega}
\newcommand\W{\mathcal W}
\newcommand\Li{\mathcal L}
\renewcommand{\theequation}{\thesection.\arabic{equation}}
%=====================================================
\setlength{\textwidth}{15cm} \setlength{\evensidemargin}{1cm}
\setlength{\oddsidemargin}{1cm}
%=====================================================
\usepackage{multirow}
\usepackage{adjustbox}
\usepackage{placeins}
\usepackage{float}

\begin{document}
\begin{table*}[!h]
\caption{Table 6.6 Software Development Library Levels and Controls-Example}
\begin{adjustbox}{width=1\textwidth}
\begin{tabular}{|p{1.5cm}|l|l|p{3cm}|l|}
\hline
Library Level &Library Name & Controlled By & SCCB & SCM\\
\hline
1& Software Work Area & Software Developer &  & \\
\cline{1-3}
2& SCM Control, Integration and Test & Site SCM & Controls & Controls\\
\cline{1-3}
3& Software Build and Qualification Testing & SCM at Site or Subsystem & Promotion between levels & Access to each Level\\
\cline{1-3}
4& Subsystem Qualification & Subsystem SCM & &\\
\cline{1-3}
5& System Verification and Validation & System SCM &&\\
\hline
\end{tabular}
\end{adjustbox}
SCM = Software Configuration Management; SCCB = Software Configuration Control Board.
\end{table*}

\begin{table*}[h!]
\caption{Table 6.7 Comparison of Formal Software Baselines}
\begin{adjustbox}{width=1\textwidth}
\begin{tabular}{|l|l|l|}
\hline
Baseline Name & Baseline Contains & Where Baseline Exists\\
\hline
Functional & System requirements & Documents and databases \\
\hline
Allocated& Architectural Design & Set of documents (SRS, IRS, etc.)\\
\hline
Design& Detailed Design & Set of documents (SAD, SDD, etc.)\\
\hline
Development& Code under development & Source code \\
\hline
Product& Tested and approved system modules & Documentation and executable programs\\
\hline
Operational & Full system in use & Customer site(s)\\
\hline
\end{tabular}
\end{adjustbox}
\end{table*}



working simultaneously on multiple version updates. Errors or features of the software may only be present in certain versions, so it is important to be able to retrieve and run different versions of the software to determine in which version(s) the problems occur.

Software Developers could retain multiple copies of the different versions of a program, and label them appropriately, but this simple approach is risky as many near-identical copies of the program have to be maintained and it often leads to mistakes. Granting read-write-execute permission to a group of Developers is also necessary; this adds the pressure of someone managing permissions so that the code base is not compromised. Consequently, systems to automate some or all of the revision control process are available to ensure that the majority of effort in managing version control is efficient and hidden.

{\bf 6.3.3 Software Configuration Identification}

Configuration Identification consists of identifying the software products to be placed under configuration control. These software products are the development products identified in the SDP, the hardware and software in the Software Development Environment, plus other documents and data as required by the contract.

{\bf Program Unique Identifiers.} The output of Configuration Identification is a configuration controlled list of configuration items. Each software requirement, or product, must be {\em uniquely identified} with a {\em Program Unique Identifier} (PUI) numbering system. Massive confusion will engulf a large software-intensive program if it lacks a carefully controlled identification system. This is not a trivial issue.

The Chief Software Engineer, or designee, should be responsible for ensuring that a common, and unique, software PUI scheme is used across the entire program or project. The identification scheme must be at the level at which the software entities will be controlled, for example, computer files, electronic media, documents, SIs, SUs and hardware elements.

{\bf Computer Assisted Software Engineering (CASE) Tools.} CASE tools, used to support Configuration Identification, should be identified as well as how their features (e.g., versioning, branching, and labeling) are used to track and control promotion and delivery of deliverable items. CASE tools are discussed in Chapter 9.

{\bf 6.3.4 Software Configuration Control} 

Software configuration control is the systematic control of modifications to baselined products throughout the product's life cycle. The SDP or the SCMP (see below) must describe the SCM process for controlling baselined products and

\end{document}